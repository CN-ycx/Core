stock void RemoveCharFromName(char[] code, int maxLen)
{
	ReplaceString(code, maxLen, "◇", "");
	ReplaceString(code, maxLen, "◆", "");
	ReplaceString(code, maxLen, "☆", "");
	ReplaceString(code, maxLen, "★", "");
	ReplaceString(code, maxLen, "✪", "");
	ReplaceString(code, maxLen, "♜", "");
	ReplaceString(code, maxLen, "♚", "");
	ReplaceString(code, maxLen, "♪", "");
	ReplaceString(code, maxLen, "♬", "");
	ReplaceString(code, maxLen, "'", "");
	ReplaceString(code, maxLen, "\"", "");
	ReplaceString(code, maxLen, "\\", "");
	ReplaceString(code, maxLen, "^", "");
	ReplaceString(code, maxLen, "(", "");
	ReplaceString(code, maxLen, ")", "");
	ReplaceString(code, maxLen, "`", "");
	ReplaceString(code, maxLen, ";", "");
	ReplaceString(code, maxLen, "☀", "");
	ReplaceString(code, maxLen, "▪", "");
	ReplaceString(code, maxLen, "♩", "");
	ReplaceString(code, maxLen, "♭", "");
	ReplaceString(code, maxLen, "♈", "");
	ReplaceString(code, maxLen, "*", "");
	ReplaceString(code, maxLen, "✄", "");
	ReplaceString(code, maxLen, "☎", "");
	ReplaceString(code, maxLen, "✈", "");
	ReplaceString(code, maxLen, "☬", "");
	ReplaceString(code, maxLen, "▽", "");
	ReplaceString(code, maxLen, "▼", "");
	ReplaceString(code, maxLen, "☽", "");
	ReplaceString(code, maxLen, "☾", "");
	ReplaceString(code, maxLen, "•", "");
	ReplaceString(code, maxLen, "♪", "");
	ReplaceString(code, maxLen, "♯", "");
	ReplaceString(code, maxLen, "♉", "");
	ReplaceString(code, maxLen, "＊", "");
	ReplaceString(code, maxLen, "✁", "");
	ReplaceString(code, maxLen, "ஐ", "");
	ReplaceString(code, maxLen, "〠", "");
	ReplaceString(code, maxLen, "♔", "");
	ReplaceString(code, maxLen, "○", "");
	ReplaceString(code, maxLen, "●", "");
	ReplaceString(code, maxLen, "♀", "");
	ReplaceString(code, maxLen, "♂", "");
	ReplaceString(code, maxLen, "‥", "");
	ReplaceString(code, maxLen, "♫", "");
	ReplaceString(code, maxLen, "♮", "");
	ReplaceString(code, maxLen, "♊", "");
	ReplaceString(code, maxLen, "✲", "");
	ReplaceString(code, maxLen, "✌", "");
	ReplaceString(code, maxLen, "☩", "");
	ReplaceString(code, maxLen, "۩", "");
	ReplaceString(code, maxLen, "☺", "");
	ReplaceString(code, maxLen, "☹", "");
	ReplaceString(code, maxLen, "…", "");
	ReplaceString(code, maxLen, "♬", "");
	ReplaceString(code, maxLen, "‖", "");
	ReplaceString(code, maxLen, "♋", "");
	ReplaceString(code, maxLen, "❈", "");
	ReplaceString(code, maxLen, "✍", "");
	ReplaceString(code, maxLen, "➹", "");
	ReplaceString(code, maxLen, "✙", "");
	ReplaceString(code, maxLen, "♕", "");
	ReplaceString(code, maxLen, "□", "");
	ReplaceString(code, maxLen, "■", "");
	ReplaceString(code, maxLen, "◐", "");
	ReplaceString(code, maxLen, "◑", "");
	ReplaceString(code, maxLen, "▁", "");
	ReplaceString(code, maxLen, "§", "");
	ReplaceString(code, maxLen, "¶", "");
	ReplaceString(code, maxLen, "♌", "");
	ReplaceString(code, maxLen, "❉", "");
	ReplaceString(code, maxLen, "✎", "");
	ReplaceString(code, maxLen, "〄", "");
	ReplaceString(code, maxLen, "✟", "");
	ReplaceString(code, maxLen, "♛", "");
	ReplaceString(code, maxLen, "☑", "");
	ReplaceString(code, maxLen, "☒", "");
	ReplaceString(code, maxLen, "▂", "");
	ReplaceString(code, maxLen, "〼", "");
	ReplaceString(code, maxLen, "卍", "");
	ReplaceString(code, maxLen, "♎", "");
	ReplaceString(code, maxLen, "✿", "");
	ReplaceString(code, maxLen, "₪", "");
	ReplaceString(code, maxLen, "☮", "");
	ReplaceString(code, maxLen, "☤", "");
	ReplaceString(code, maxLen, "♗", "");
	ReplaceString(code, maxLen, "◁", "");
	ReplaceString(code, maxLen, "▶", "");
	ReplaceString(code, maxLen, "√", "");
	ReplaceString(code, maxLen, "×", "");
	ReplaceString(code, maxLen, "▃", "");
	ReplaceString(code, maxLen, "◎", "");
	ReplaceString(code, maxLen, "卐", "");
	ReplaceString(code, maxLen, "♏", "");
	ReplaceString(code, maxLen, "❀", "");
	ReplaceString(code, maxLen, "ி", "");
	ReplaceString(code, maxLen, "☪", "");
	ReplaceString(code, maxLen, "☥", "");
	ReplaceString(code, maxLen, "♝", "");
	ReplaceString(code, maxLen, "▷", "");
	ReplaceString(code, maxLen, "◀", "");
	ReplaceString(code, maxLen, "✔", "");
	ReplaceString(code, maxLen, "✘", "");
	ReplaceString(code, maxLen, "▄", "");
	ReplaceString(code, maxLen, "¤", "");
	ReplaceString(code, maxLen, "▬", "");
	ReplaceString(code, maxLen, "♐", "");
	ReplaceString(code, maxLen, "❃", "");
	ReplaceString(code, maxLen, "❧", "");
	ReplaceString(code, maxLen, "❂", "");
	ReplaceString(code, maxLen, "☦", "");
	ReplaceString(code, maxLen, "♘", "");
	ReplaceString(code, maxLen, "♤", "");
	ReplaceString(code, maxLen, "♠", "");
	ReplaceString(code, maxLen, "☜", "");
	ReplaceString(code, maxLen, "☚", "");
	ReplaceString(code, maxLen, "▅", "");
	ReplaceString(code, maxLen, "۞", "");
	ReplaceString(code, maxLen, "〓", "");
	ReplaceString(code, maxLen, "♑", "");
	ReplaceString(code, maxLen, "❁", "");
	ReplaceString(code, maxLen, "❦", "");
	ReplaceString(code, maxLen, "☭", "");
	ReplaceString(code, maxLen, "☧", "");
	ReplaceString(code, maxLen, "♞", "");
	ReplaceString(code, maxLen, "♡", "");
	ReplaceString(code, maxLen, "♥", "");
	ReplaceString(code, maxLen, "☝", "");
	ReplaceString(code, maxLen, "☟", "");
	ReplaceString(code, maxLen, "▆", "");
	ReplaceString(code, maxLen, "℗", "");
	ReplaceString(code, maxLen, "℡", "");
	ReplaceString(code, maxLen, "♓", "");
	ReplaceString(code, maxLen, "☸", "");
	ReplaceString(code, maxLen, "ღ", "");
	ReplaceString(code, maxLen, "☠", "");
	ReplaceString(code, maxLen, "☨", "");
	ReplaceString(code, maxLen, "♖", "");
	ReplaceString(code, maxLen, "♢", "");
	ReplaceString(code, maxLen, "♦", "");
	ReplaceString(code, maxLen, "☞", "");
	ReplaceString(code, maxLen, "☛", "");
	ReplaceString(code, maxLen, "█", "");
	ReplaceString(code, maxLen, "®", "");
	ReplaceString(code, maxLen, "™", "");
	ReplaceString(code, maxLen, "♒", "");
	ReplaceString(code, maxLen, "❁", "");
	ReplaceString(code, maxLen, "❤", "");
	ReplaceString(code, maxLen, "☣", "");
	ReplaceString(code, maxLen, "☫", "");
	ReplaceString(code, maxLen, "♧", "");
	ReplaceString(code, maxLen, "♣", "");
	ReplaceString(code, maxLen, "㏂", "");
	ReplaceString(code, maxLen, "㏘", "");
	ReplaceString(code, maxLen, "█", "");
	ReplaceString(code, maxLen, "©", "");
	ReplaceString(code, maxLen, "㏇", "");
	ReplaceString(code, maxLen, "♍", "");
	ReplaceString(code, maxLen, "✖", "");
	ReplaceString(code, maxLen, "☢", "");
	ReplaceString(code, maxLen, "✚", "");
	ReplaceString(code, maxLen, "♙", "");
	ReplaceString(code, maxLen, "♟", "");
	ReplaceString(code, maxLen, "☁", "");
	ReplaceString(code, maxLen, "☂", "");
	ReplaceString(code, maxLen, "☃", "");
	ReplaceString(code, maxLen, "ミク", "");
}

stock void FriendIDtoSteamID(const char[] szSteam64, char[] szSteam2, int iLen)
{
	char[] szBase = "76561197960265728";
	char szSteam[18], szAccount[18];
	int iBorrow, iY, iZ, iTemp;

	strcopy(szSteam, 18, szSteam64);

	if(CharToNumber(szSteam[16]) % 2 == 1)
	{
		iY = 1;
		szSteam[16] = NumberToChar(CharToNumber(szSteam[16]) - 1);
	}
	
	for(int k = 16; k >= 0; k--)
	{
		if (iBorrow > 0)
		{
			iTemp = CharToNumber(szSteam[k]) - 1;
			
			if (iTemp >= CharToNumber(szBase[k]))
			{
				iBorrow = 0;
				szAccount[k] = NumberToChar(iTemp - CharToNumber(szBase[k]));
			}
			else
			{
				iBorrow = 1;
				szAccount[k] = NumberToChar((iTemp + 10) - CharToNumber(szBase[k]));
			}
		}
		else
		{
			if (CharToNumber(szSteam[k]) >= CharToNumber(szBase[k]))
			{
				iBorrow = 0;
				szAccount[k] = NumberToChar(CharToNumber(szSteam[k]) - CharToNumber(szBase[k]));
			}
			else
			{
				iBorrow = 1;
				szAccount[k] = NumberToChar((CharToNumber(szSteam[k]) + 10) - CharToNumber(szBase[k]));
			}
		}
	}
	
	iZ = StringToInt(szAccount);
	iZ /= 2;
	
	FormatEx(szSteam2, iLen, "STEAM_1:%d:%d", iY, iZ);
}

stock int NumberToChar(const int iNum)
{
    return '0' + ((iNum >= 0 && iNum <= 9) ? iNum : 0);
}

stock int CharToNumber(const int cNum)
{
    return (cNum >= '0' && cNum <= '9') ? (cNum - '0') : 0;
}

stock void ReplaceColorsCode(char[] code, int maxLen)
{
	ReplaceString(code, maxLen, "{normal}", "\x01", false);
	ReplaceString(code, maxLen, "{default}", "\x01", false);
	ReplaceString(code, maxLen, "{white}", "\x01", false);
	ReplaceString(code, maxLen, "{darkred}", "\x02", false);
	ReplaceString(code, maxLen, "{teamcolor}", "\x03", false);
	ReplaceString(code, maxLen, "{pink}", "\x03", false);
	ReplaceString(code, maxLen, "{green}", "\x04", false);
	ReplaceString(code, maxLen, "{highlight}", "\x04", false);
	ReplaceString(code, maxLen, "{yellow}", "\x05", false);
	ReplaceString(code, maxLen, "{lightgreen}", "\x05", false);
	ReplaceString(code, maxLen, "{lime}", "\x06", false);
	ReplaceString(code, maxLen, "{lightred}", "\x07", false);
	ReplaceString(code, maxLen, "{red}", "\x07", false);
	ReplaceString(code, maxLen, "{gray}", "\x08", false);
	ReplaceString(code, maxLen, "{grey}", "\x08", false);
	ReplaceString(code, maxLen, "{olive}", "\x09", false);
	ReplaceString(code, maxLen, "{orange}", "\x10", false);
	ReplaceString(code, maxLen, "{silver}", "\x0A", false);
	ReplaceString(code, maxLen, "{lightblue}", "\x0B", false);
	ReplaceString(code, maxLen, "{blue}", "\x0C", false);
	ReplaceString(code, maxLen, "{purple}", "\x0E", false);
	ReplaceString(code, maxLen, "{darkorange}", "\x0F", false);
}

stock void tPrintToChat(int client, const char[] szMessage, any ...)
{
	char szBuffer[256];
	VFormat(szBuffer, 256, szMessage, 3);
	ReplaceColorsCode(szBuffer, 256);
	PrintToChat(client, szBuffer);
}

stock bool IsValidClient(int client)
{
	if(!(1 <= client <= MaxClients))
		return false;

	if(!IsClientInGame(client))
		return false;

	if(IsFakeClient(client))
		return false;

	return true;
}